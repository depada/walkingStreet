var Sdk;
!(function (o) {
  var t =
    ((e.prototype.parse = function (t, e) {
      if (
        (o.Tools.removeListeners("ft-widget-ready"),
        o.Tools.removeListeners("message"),
        (this.uid = t || this.element.getAttribute("data-restaurant")),
        this.uid)
      ) {
        (this.id = "b1:" + this.uid),
          (this.type = "b1"),
          (this.accentColor = this.element.getAttribute("data-accentColor")),
          (this.textColor = this.element.getAttribute("data-textColor")),
          (this.bgColor = this.element.getAttribute("data-bgColor")),
          (this.tag = this.element.getAttribute("data-tag")),
          (this.language = this.element.getAttribute("data-language") || "en"),
          (this.frame = document.createElement("iframe"));
        t =
          "https://widget.formitable.com/formitable/" +
          this.language +
          "/" +
          this.uid +
          "/when";
        for (
          this.accentColor &&
            (t = o.Tools.updateQueryStringParameter(
              t,
              "accentColor",
              this.accentColor
            )),
            this.textColor &&
              (t = o.Tools.updateQueryStringParameter(
                t,
                "textColor",
                this.textColor
              )),
            this.bgColor &&
              (t = o.Tools.updateQueryStringParameter(
                t,
                "bgColor",
                this.bgColor
              )),
            this.tag &&
              (t = o.Tools.updateQueryStringParameter(t, "tag", this.tag)),
            this.frame.setAttribute("src", encodeURI(t).replace(/#/g, "%23")),
            this.frame.setAttribute("scrolling", "yes"),
            this.frame.setAttribute("frameborder", "0"),
            this.frame.style.cssText = "width:300px; height:420px;";
          this.element.firstChild;

        )
          this.element.removeChild(this.element.firstChild);
        this.element.appendChild(this.frame),
          this.element.setAttribute(
            "style",
            "display:inline-block;width:300px;height:420px"
          ),
          this.element.setAttribute("data-rendered", ""),
          (this.ready = !0),
          this.callback && this.callback(this);
      } else console.warn("FT: Cannot create widget without restaurant-id");
    }),
    (e.prototype.close = function () {}),
    e);
  function e(t, e) {
    (this.element = t), (this.callback = e), this.parse();
  }
  o.BookWidget1 = t;
})((Sdk = Sdk || {})),
  (function (d) {
    var t =
      ((e.prototype.load = function (t) {
        var r,
          n,
          s = this;
        if (
          (d.Tools.removeListeners("ft-widget-ready"),
          d.Tools.removeListeners("message"),
          d.Tools.loadStyleSheet(
            "https://widget.formitable.com/app/widgets/side/style/css/parent.min.css"
          ),
          (this.preview = !!d.Tools.getParameterByName("ft-preview")),
          (this.reopen = "false" != d.Tools.getParameterByName("ft-reopen")),
          (this.color = this.element.getAttribute("data-color") || "#333"),
          (this.tag =
            d.Tools.getParameterByName("ft-tag") ||
            this.element.getAttribute("data-tag") ||
            "Website"),
          (this.language =
            d.Tools.getParameterByName("ft-language") ||
            this.element.getAttribute("data-language") ||
            "auto"),
          (this.toolbar =
            !this.element.getAttribute("data-toolbar") ||
            "true" === this.element.getAttribute("data-toolbar")),
          (this.toolbarMobile = this.element.getAttribute("data-toolbar-mobile")
            ? "true" === this.element.getAttribute("data-toolbar-mobile")
            : this.toolbar),
          (this.openAfterMobile =
            this.element.getAttribute("data-open-mobile") || "false"),
          (this.openAfter =
            screen.width <= 600
              ? this.openAfterMobile
              : this.element.getAttribute("data-open") || "1500"),
          (this.frame = document.createElement("iframe")),
          t)
        )
          (this.uid = t), (this.isMultiVenueGroup = !1);
        else if (d.Tools.getParameterByName("ft-restaurant"))
          (this.uid = d.Tools.getParameterByName("ft-restaurant")),
            (this.isMultiVenueGroup = !1);
        else if (d.Tools.getParameterByName("ft-group"))
          (this.uid = d.Tools.getParameterByName("ft-group")),
            (this.isMultiVenueGroup = !0);
        else if (this.element.getAttribute("data-restaurant"))
          (this.uid = this.element.getAttribute("data-restaurant")),
            (this.isMultiVenueGroup = !1);
        else {
          if (!this.element.getAttribute("data-group"))
            return void console.warn(
              "FT: Cannot create widget without Restaurant ID or Multi Venue Group ID!"
            );
          (this.uid = this.element.getAttribute("data-group")),
            (this.isMultiVenueGroup = !0);
        }
        (this.uid = this.uid.trim()),
          (this.id = "b2_" + this.uid),
          (this.type = "b2"),
          this.closedCheck(),
          this.element.parentElement !== document.body &&
            document.body.appendChild(this.element),
          this.isMultiVenueGroup
            ? d.Tools.httpGetAsync(
                "https://widget-api.formitable.com/api/restaurant/multivenuegroup/" +
                  this.uid +
                  "/status",
                function (t) {
                  var e,
                    o = JSON.parse(t);
                  s.preview ||
                  (0 < o.length &&
                    o
                      .map(function (t) {
                        return t.live;
                      })
                      .some(function (t) {
                        return !0 === t;
                      }))
                    ? ((t = o
                        .map(function (t) {
                          return null === t.cultures
                            ? []
                            : t.cultures.map(function (t) {
                                return t.substring(0, 2);
                              });
                        })
                        .flat()),
                      (e =
                        "auto" === s.language
                          ? navigator.language.substring(0, 2)
                          : s.language),
                      0 ===
                        t.filter(function (t) {
                          return t === e;
                        }).length &&
                        (e =
                          0 !==
                          t.filter(function (t) {
                            return "en" === t;
                          }).length
                            ? "en"
                            : o[0].startCulture),
                      (t = void 0),
                      (t = o.some(function (t) {
                        return "Stripe" === t.paymentProvider;
                      })
                        ? "Stripe"
                        : o.some(function (t) {
                            return "Mollie" === t.paymentProvider;
                          })
                        ? "Mollie"
                        : "None"),
                      s.init(!0, e, t))
                    : console.info(
                        "Restaurant multi venue group: " +
                          s.uid +
                          " with restaurants: " +
                          o
                            .map(function (t) {
                              return t.restaurantUid;
                            })
                            .join(", ") +
                          " has no (live) restaurants yet. Please go to app.formitable.com to put at least one live."
                      );
                }
              )
            : (d.Tools.httpGetAsync(
                "https://widget-api.formitable.com/api/restaurant/" +
                  this.uid +
                  "/status",
                function (t) {
                  var e,
                    o = JSON.parse(t);
                  s.preview || (o && o.live)
                    ? ((t = o.cultures.map(function (t) {
                        return t.substring(0, 2);
                      })),
                      (e =
                        "auto" === s.language
                          ? navigator.language.substring(0, 2)
                          : s.language),
                      0 ===
                        t.filter(function (t) {
                          return t === e;
                        }).length &&
                        (e =
                          0 !==
                          t.filter(function (t) {
                            return "en" === t;
                          }).length
                            ? "en"
                            : o.startCulture),
                      s.init(!1, e, o.paymentProvider, o.widgetDefaultPage))
                    : console.info(
                        "Restaurant: " +
                          s.uid +
                          " is not live yet. Please go to app.formitable.com to go live."
                      );
                }
              ),
              (r = !1),
              (n =
                /ft-shop|ft-product|ft-voucher|ft-ticket|ft-takeaway|ft-unsubscribe|ft-subscribe|ft-option|ft-promotioncode/.test(
                  location.search
                )),
              d.Tools.httpGetAsync(
                "https://widget-api.formitable.com/api/campaign/" +
                  this.uid +
                  "/popup",
                function (t) {
                  var e,
                    o,
                    i,
                    a = JSON.parse(t);
                  r ||
                    n ||
                    !a ||
                    "true" == sessionStorage.getItem("ft-popup-closed") ||
                    ((i = a.restaurantCultures.map(function (t) {
                      return t.substring(0, 2);
                    })),
                    (e =
                      "auto" === s.language
                        ? navigator.language.substring(0, 2)
                        : s.language),
                    0 ===
                      i.filter(function (t) {
                        return t === e;
                      }).length &&
                      (e =
                        0 !==
                        i.filter(function (t) {
                          return "en" === t;
                        }).length
                          ? "en"
                          : a.restaurantStartCulture),
                    (o = (a.title && (a.title[e] || a.title[0])) || ""),
                    (t = (a.content && (a.content[e] || a.content[0])) || ""),
                    (i =
                      (a.websiteDialogCallToActionText &&
                        (a.websiteDialogCallToActionText[e] ||
                          a.websiteDialogCallToActionText[0])) ||
                      ""),
                    s.initDialog(
                      o,
                      t,
                      a.websiteDialogTheme,
                      a.websiteDialogPosition,
                      i,
                      a.websiteDialogCallToActionUrl,
                      a.id
                    ),
                    (r = !0),
                    FT.widgets.parseAnchors());
                }
              ));
      }),
      (e.prototype.init = function (o, t, e, i) {
        var a,
          r,
          n,
          s,
          u = this;
        void 0 === e && (e = null),
          void 0 === i && (i = null),
          o
            ? (r =
                "https://widget.formitable.com/side/" +
                t +
                "/" +
                this.uid +
                "/multi")
            : ((r =
                "https://widget.formitable.com/side/" +
                t +
                "/" +
                this.uid +
                "/" +
                (a = i || "book")),
              (i = d.Tools.getParameterByName("ft-ticket")) &&
                ((r = r.replace(a, "ticket/" + i)),
                (this.openAfter = "500"),
                (r = d.Tools.updateQueryStringParameter(r, "ticketOnly", "")),
                (s =
                  d.Tools.getParameterByName("ft-friend") ||
                  d.Tools.getParameterByName("ft-cid")) &&
                  (r = d.Tools.updateQueryStringParameter(r, "friendCode", s))),
              (i = d.Tools.getParameterByName("ft-booking")) &&
                ((r = r.replace(a, "finish")),
                (this.openAfter = "1000"),
                (r = d.Tools.updateQueryStringParameter(r, "booking", i))),
              (s = d.Tools.getParameterByName("ft-order")) &&
                ((r =
                  (i = d.Tools.getParameterByName("ft-productType")) &&
                  "giftvoucher" == i.toLowerCase()
                    ? r.replace(a, "voucher/finish")
                    : i && "takeaway" == i.toLowerCase()
                    ? r.replace(a, "takeAway/finish")
                    : r.replace(a, "shop/finish")),
                (this.openAfter = "1000"),
                (r = d.Tools.updateQueryStringParameter(r, "order", s))),
              (s = d.Tools.getParameterByName("ft-voucher")) &&
                (r = d.Tools.updateQueryStringParameter(r, "voucherCode", s)),
              (s = d.Tools.getParameterByName("ft-cid")) &&
                (r = d.Tools.updateQueryStringParameter(r, "campaignId", s)),
              (s = d.Tools.getParameterByName("ft-rid")) &&
                (r = d.Tools.updateQueryStringParameter(r, "recipientId", s)),
              (s = d.Tools.getParameterByName("ft-unsubscribe")) &&
                ((this.openAfter = "150"),
                (r = r.replace(a, "unsubscribe")),
                (r = d.Tools.updateQueryStringParameter(r, "email", s))),
              d.Tools.parameterIsPresent("ft-subscribe") &&
                ((this.openAfter = "150"),
                (r = r.replace(a, "subscribe")),
                (n = d.Tools.getParameterByName("ft-subscribe")) &&
                  (r = d.Tools.updateQueryStringParameter(r, "email", n))),
              (s = d.Tools.getParameterByName("ft-code")) &&
                (r = d.Tools.updateQueryStringParameter(r, "code", s)),
              (n = d.Tools.getParameterByName("ft-type")) &&
                (r = d.Tools.updateQueryStringParameter(r, "type", n)),
              (s = d.Tools.getParameterByName("ft-partysize")) &&
                (r = d.Tools.updateQueryStringParameter(r, "partysize", s)),
              (n = d.Tools.getParameterByName("ft-date")) &&
                (r = d.Tools.updateQueryStringParameter(r, "date", n)),
              (s = d.Tools.getParameterByName("ft-time")) &&
                (r = d.Tools.updateQueryStringParameter(r, "time", s)),
              (n = d.Tools.getParameterByName("ft-waitlistItem")) &&
                (r = d.Tools.updateQueryStringParameter(r, "waitlistItem", n)),
              (s = d.Tools.getParameterByName("ft-promotioncode")) &&
                (r = d.Tools.updateQueryStringParameter(r, "promotioncode", s)),
              (n = d.Tools.getParameterByName("ft-shop")) &&
                ("takeaway" == n
                  ? (r = r.replace(a, "takeaway"))
                  : "reservations" == n || (r = r.replace(a, "vouchers")),
                (this.openAfter = "150"),
                (r = d.Tools.updateQueryStringParameter(r, "shop", n))),
              (s = d.Tools.getParameterByName("ft-product")) &&
                ((r = r.replace(a, "voucher/checkout/" + s)),
                (this.openAfter = "150"),
                (r = d.Tools.updateQueryStringParameter(r, "product", s))),
              (s = d.Tools.getParameterByName("ft-takeaway")) &&
                ((r = r.replace(a, "takeaway")),
                (this.openAfter = "150"),
                (r = d.Tools.updateQueryStringParameter(r, "productUid", s))),
              (n = d.Tools.getParameterByName("ft-option")),
              (s = d.Tools.getParameterByName("ft-option-accept")),
              n &&
                ((n = n.replace(
                  new RegExp(
                    "\\bFT.Core.ViewModels.MailTemplates.BookingMail.\\b"
                  ),
                  ""
                )),
                (r = r.replace(a, "option")),
                (this.openAfter = "150"),
                (r = d.Tools.updateQueryStringParameter(r, "optionId", n))),
              s && (r = d.Tools.updateQueryStringParameter(r, "accept", s))),
          (r = d.Tools.updateQueryStringParameter(r, "paymentProvider", e)),
          (r = d.Tools.updateQueryStringParameter(r, "toolbar", this.toolbar)),
          (r = d.Tools.updateQueryStringParameter(
            r,
            "mobileToolbar",
            this.toolbarMobile
          )),
          (r = d.Tools.updateQueryStringParameter(r, "tag", this.tag)),
          (r = d.Tools.updateQueryStringParameter(r, "color", this.color)),
          (r = d.Tools.updateQueryStringParameter(r, "reopen", this.reopen)),
          (r = d.Tools.updateQueryStringParameter(r, "preview", this.preview));
        e = this.element.getAttribute("data-group");
        e && (r = d.Tools.updateQueryStringParameter(r, "multivenue", e));
        e = document.getElementById("wixMobileViewport");
        for (
          e &&
            -1 < e.getAttribute("content").indexOf("320") &&
            (r = d.Tools.updateQueryStringParameter(r, "site", "wix-mobile")),
            this.frame.setAttribute("src", encodeURI(r).replace(/#/g, "%23")),
            this.frame.setAttribute("scrolling", "no"),
            this.frame.setAttribute("frameborder", "0"),
            this.frame.style.cssText = "height:100%;width:100%";
          this.element.firstChild;

        )
          this.element.removeChild(this.element.firstChild);
        this.element.appendChild(this.frame),
          d.Tools.addWindowListener("ft-widget-ready", function (t) {
            var e;
            t.detail.init &&
              (u.closedCheck((e = !o && "book" !== a)),
              d.Tools.isInt(u.openAfter)
                ? window.setTimeout(function () {
                    u.closedCheck(e) && u.open("init");
                  }, parseInt(u.openAfter))
                : "true" === u.openAfter && u.open("init")),
              u.element.setAttribute("data-rendered", ""),
              (u.ready = !0),
              u.callMethod({
                method: "setReturnUrl",
                args: [
                  window.location.href
                    .replace(location.hash, "")
                    .replace(location.search, "")
                    .replace("#", ""),
                ],
              }),
              u.callback && (u.callback(u), (u.callback = null));
          });
      }),
      (e.prototype.initDialog = function (t, e, o, i, a, r, n) {
        var s = document.getElementById("ft-popup");
        s && s.parentNode.removeChild(s),
          document.body.insertAdjacentHTML(
            "beforeend",
            '<div id="ft-popup" class="ft-message-dialog -' +
              i +
              " -" +
              o +
              '">\n                 \x3c!-- Use class -center and -bottom-left to position the dialog, use classes -light-theme or -dark-theme to switch colors --\x3e\n                <div class="ft-message-dialog-wrapper">\n                    <a class="_close-dialog" onclick="sessionStorage.setItem(\'ft-popup-closed\',\'true\');document.getElementById(\'ft-popup\').remove()">\n                        <svg width="12px" height="12px" id="close" viewBox="0 0 10.5 10.5">\n                            <path d="M6.7,5.2l3.5-3.5c0.4-0.4,0.4-1,0-1.4c-0.4-0.4-1-0.4-1.4,0L5.2,3.8L1.7,0.3c-0.4-0.4-1-0.4-1.4,0\n\t        c-0.4,0.4-0.4,1,0,1.4l3.5,3.5L0.3,8.8c-0.4,0.4-0.4,1,0,1.4c0.4,0.4,1,0.4,1.4,0l3.5-3.5l3.5,3.5c0.4,0.4,1,0.4,1.4,0\n\t        c0.4-0.4,0.4-1,0-1.4L6.7,5.2z" />\n                        </svg>\n                    </a>\n                     ' +
              (t
                ? '  \n                    <div class="_dialog-title">\n                        ' +
                  t +
                  "\n                    </div>"
                : "") +
              '\n          \n                    <div class="_dialog-message">\n                        <p>' +
              e +
              "</p>\n                    </div>\n                       " +
              (r && "none" != r
                ? '<a href="' +
                  r +
                  '" data-cid="' +
                  n +
                  '" class="_dialog-action" id="ft-popup-cta">' +
                  a +
                  "</a>"
                : "") +
              "\n                </div>\n            </div>"
          );
        a = document.getElementById("ft-popup-cta");
        a &&
          a.addEventListener(
            "click",
            function (t) {
              sessionStorage.setItem("ft-popup-closed", "true"),
                document.getElementById("ft-popup").remove();
            },
            !0
          );
      }),
      (e.prototype.event = function (t, e) {
        var o;
        "function" == typeof CustomEvent
          ? ((o = new CustomEvent(t, { detail: e })), window.dispatchEvent(o))
          : ((o = document.createEvent("Event")).initEvent(t, !0, !0),
            (o.detail = e),
            window.dispatchEvent(o));
      }),
      (e.prototype.callMethod = function (t) {
        this.frame.contentWindow.postMessage(t, "*");
      }),
      (e.prototype.clearParams = function () {
        d.Tools.removeAllFtParams();
      }),
      (e.prototype.addClass = function (t) {
        this.element.classList.add(t);
      }),
      (e.prototype.removeClass = function (t) {
        this.element.classList.remove(t);
      }),
      (e.prototype.removeAllClasses = function (t) {
        t && this.element.classList.contains(t)
          ? this.element.setAttribute("class", t)
          : this.element.setAttribute("class", "");
      }),
      (e.prototype.highlight = function () {
        document.body.classList.add("ft-w-highlight"),
          setTimeout(function () {
            document.body.classList.remove("ft-w-highlight");
          }, 500);
      }),
      (e.prototype.full = function () {
        document.body.classList.remove("ft-w-small"),
          document.body.classList.add("ft-w-full"),
          this.element.classList.add("ft-fullw");
      }),
      (e.prototype.small = function () {
        document.body.classList.remove("ft-w-full"),
          document.body.classList.add("ft-w-small"),
          this.element.classList.remove("ft-fullw");
      }),
      (e.prototype.closedCheck = function (t) {
        if ((void 0 === t && (t = !1), -1 < location.search.indexOf("ft-")))
          return !0;
        var e = this.getSessionStorageWidgetState();
        return (
          !e ||
          ("close" != e || t
            ? ((this.openAfter = "true"), !0)
            : !(this.openAfter = "false"))
        );
      }),
      (e.prototype.getSessionStorageWidgetState = function () {
        if (!d.Tools.storageAvailable("sessionStorage")) return null;
        var t = sessionStorage.getItem("ft-widget-state");
        return t || null;
      }),
      (e.prototype.parse = function (t, e) {
        this.uid && this.close("load"), e && (this.callback = e), this.load(t);
      }),
      (e.prototype.open = function (t) {
        (t = t || "script"),
          this.element.classList.contains("ft-open")
            ? this.highlight()
            : (this.event("ft-widget-open", { widgetId: this.id, sender: t }),
              ("script" !== t && "anchor" !== t && "init" !== t) ||
                this.callMethod({ method: "open", args: [t] }),
              d.Tools.storageAvailable("sessionStorage") &&
                sessionStorage.setItem("ft-widget-state", "open"),
              document.body.classList.remove("ft-w-closed"),
              document.body.classList.add("ft-w-open"),
              this.element.classList.add("ft-open"));
      }),
      (e.prototype.close = function (t) {
        this.event("ft-widget-close", {
          widgetId: this.id,
          sender: (t = t || "script"),
        }),
          "load" != t &&
            d.Tools.storageAvailable("sessionStorage") &&
            sessionStorage.setItem("ft-widget-state", "close"),
          ("script" !== t && "anchor" !== t && "init" !== t) ||
            this.callMethod({ method: "close", args: [t] }),
          d.Tools.removeAllFtParams(),
          document.body.classList.remove("ft-w-open"),
          document.body.classList.add("ft-w-closed"),
          this.element.classList.remove("ft-open");
      }),
      (e.prototype.toggle = function (t) {
        (t = t || "script"),
          this.element.classList.contains("ft-open")
            ? this.close(t)
            : this.open(t);
      }),
      (e.prototype.openVouchers = function (t, e, o) {
        this.navigate("vouchers", void 0, t, e, o);
      }),
      (e.prototype.openSubscribe = function (t, e, o, i) {
        this.navigate("subscribe", t, e, o, i);
      }),
      (e.prototype.openShop = function (t, e, o, i) {
        this.navigate(t, void 0, e, o, i);
      }),
      (e.prototype.openProduct = function (t, e, o, i) {
        this.navigate("voucherCheckout", t, e, o, i);
      }),
      (e.prototype.openTicket = function (t, e, o, i) {
        this.navigate("ticket", t, e, o, i);
      }),
      (e.prototype.openTakeaway = function (t, e, o, i) {
        this.navigate("takeaway", t, e, o, i);
      }),
      (e.prototype.navigate = function (t, e, o, i, a) {
        var r = this;
        this.callMethod({ method: "navigate", args: [t, e, i, a] }),
          setTimeout(function () {
            r.open(o);
          }, 300);
      }),
      e);
    function e(t, e) {
      (this.element = t), (this.callback = e), this.load();
    }
    d.BookWidget2 = t;
  })((Sdk = Sdk || {})),
  (function (t) {
    var e;
    function o() {
      (this.name = "Analytics"),
        (this.sendPageViews = !0),
        (this.disableGoogleTracking = !1),
        (this.disableFacebookTracking = !1),
        t.Tools.removeListeners("ft-widget-navigated"),
        t.Tools.removeListeners("ft-widget-ordered"),
        t.Tools.removeListeners("ft-widget-open"),
        t.Tools.removeListeners("ft-widget-close"),
        this.init();
    }
    (e = t.Modules || (t.Modules = {})),
      (o.prototype.init = function () {
        var e = this;
        t.Tools.addWindowListener("ft-widget-open", function (t) {
          e.trackCustomEvent("open", "widget", t.detail.sender);
        }),
          t.Tools.addWindowListener("ft-widget-close", function (t) {
            e.trackCustomEvent("close", "widget", t.detail.sender);
          }),
          t.Tools.addWindowListener("ft-widget-navigated", function (t) {
            e.trackPageView(t.detail.page, t.detail.productType || ""),
              0 === t.detail.page.indexOf("ticket/") &&
                e.trackContentView(
                  t.detail.products || [],
                  t.detail.from,
                  t.detail.productType || ""
                ),
              "checkout" === t.detail.page &&
                (e.trackCheckoutView(
                  t.detail.products || [],
                  t.detail.productType || ""
                ),
                e.trackAddToCartEvent(
                  t.detail.products || [],
                  t.detail.productType || ""
                )),
              "takeaway-checkout" === t.detail.page &&
                e.trackCheckoutView(
                  t.detail.products || [],
                  t.detail.productType || ""
                ),
              "takeaway-addtocart" === t.detail.page &&
                e.trackAddToCartEvent(
                  t.detail.products || [],
                  t.detail.productType || ""
                );
          }),
          t.Tools.addWindowListener("ft-widget-ordered", function (t) {
            e.trackOrder(t.detail.order, t.detail.productType || "");
          });
      }),
      (o.prototype.set = function (t, e) {
        this[t] = e;
      }),
      (o.prototype.trackPageView = function (t, e) {
        this.sendPageViews &&
          !this.disableGoogleTracking &&
          ("undefined" != typeof ga &&
            ga("send", "pageview", "/ft/widget/" + t.toLowerCase()),
          "undefined" != typeof gtag
            ? gtag("config", window.dataLayer[1][1], {
                page_title: t,
                page_path: "/ft/widget/" + t.toLowerCase(),
              })
            : "undefined" != typeof dataLayer &&
              dataLayer.push({
                event: "ft.pageview",
                virtualPageURL: "/ft/widget/" + t.toLowerCase(),
                virtualPageTitle: t,
                productType: e,
              }));
      }),
      (o.prototype.trackContentView = function (t, e, o) {
        var i = this;
        if ("undefined" != typeof fbq && !this.disableFacebookTracking)
          for (var a = 0; a < t.length; a++)
            fbq("track", "ViewContent", {
              content_type: "product",
              content_ids: [t[a].uid],
              content_name: t[a].title,
            });
        if (!this.disableGoogleTracking) {
          if ("undefined" != typeof ga) {
            for (a = 0; a < t.length; a++)
              ga("ec:addProduct", {
                id: t[a].uid,
                name: t[a].title,
                price:
                  ((this.conversion || {})[t[a].uid] || {}).value ||
                  t[a].amount,
                quantity: t[a].quantity,
                category: t[a].type,
              });
            ga("ec:setAction", "detail");
          }
          "undefined" != typeof gtag
            ? gtag("event", "view_item", {
                items: t.map(function (t) {
                  return {
                    id: t.uid,
                    name: t.title,
                    quantity: t.quantity,
                    price:
                      ((i.conversion || {})[t.uid] || {}).value || t.amount,
                    category: t.type,
                  };
                }),
              })
            : "undefined" != typeof dataLayer &&
              dataLayer.push({
                event: "ft.detail",
                productType: o,
                ecommerce: {
                  currencyCode: "EUR",
                  detail: {
                    actionField: { list: e },
                    products: t.map(function (t) {
                      return {
                        id: t.uid,
                        name: t.title,
                        price:
                          ((i.conversion || {})[t.uid] || {}).value || t.amount,
                        category: t.type,
                      };
                    }),
                  },
                },
              });
        }
      }),
      (o.prototype.trackCheckoutView = function (t, e) {
        var o,
          i = this;
        if (
          ("undefined" == typeof fbq ||
            this.disableFacebookTracking ||
            fbq("track", "InitiateCheckout", {}),
          !this.disableGoogleTracking)
        ) {
          if ("undefined" != typeof ga) {
            for (var a = 0; a < t.length; a++)
              ga("ec:addProduct", {
                id: t[a].uid,
                name: t[a].title,
                price:
                  ((this.conversion || {})[t[a].uid] || {}).value ||
                  t[a].amount,
                quantity: t[a].quantity,
                category: t[a].type,
              });
            ga("ec:setAction", "checkout", {});
          }
          "undefined" != typeof gtag
            ? ((o = t.map(function (t) {
                return {
                  id: t.uid,
                  name: t.title,
                  quantity: t.quantity,
                  price: ((i.conversion || {})[t.uid] || {}).value || t.amount,
                  category: t.type,
                };
              })),
              gtag("event", "begin_checkout", { items: o }))
            : "undefined" != typeof dataLayer &&
              ((o = t.map(function (t) {
                return {
                  id: t.uid,
                  name: t.title,
                  price: ((i.conversion || {})[t.uid] || {}).value || t.amount,
                  category: t.type,
                  quantity: t.quantity,
                };
              })),
              dataLayer.push({
                event: "ft.checkout",
                productType: e,
                ecommerce: {
                  currencyCode: "EUR",
                  checkout: { actionField: {}, products: o },
                },
              }));
        }
      }),
      (o.prototype.trackAddToCartEvent = function (t, e) {
        var o,
          i = this;
        if ("undefined" != typeof fbq && !this.disableFacebookTracking)
          for (var a = 0; a < t.length; a++)
            fbq("track", "AddToCart", {
              content_type: "product",
              content_ids: [t[a].uid],
              content_name: t[a].title,
              value:
                ((this.conversion || {})[t[a].uid] || {}).value || t[a].amount,
              currency: "EUR",
            });
        if (!this.disableGoogleTracking) {
          if ("undefined" != typeof ga) {
            for (a = 0; a < t.length; a++)
              ga("ec:addProduct", {
                id: t[a].uid,
                name: t[a].title,
                price:
                  ((this.conversion || {})[t[a].uid] || {}).value ||
                  t[a].amount,
                quantity: t[a].quantity,
                category: t[a].type,
              });
            ga("ec:setAction", "add");
          }
          "undefined" != typeof gtag
            ? ((o = t.map(function (t) {
                return {
                  id: t.uid,
                  name: t.title,
                  quantity: t.quantity,
                  price: ((i.conversion || {})[t.uid] || {}).value || t.amount,
                  category: t.type,
                };
              })),
              gtag("event", "add_to_cart", { items: o }))
            : "undefined" != typeof dataLayer &&
              ((o = t.map(function (t) {
                return {
                  id: t.uid,
                  name: t.title,
                  price: ((i.conversion || {})[t.uid] || {}).value || t.amount,
                  category: t.type,
                  quantity: t.quantity,
                };
              })),
              dataLayer.push({
                event: "ft.addToCart",
                productType: e,
                ecommerce: { currencyCode: "EUR", add: { products: o } },
              }));
        }
      }),
      (o.prototype.trackCustomEvent = function (t, e, o) {
        this.disableGoogleTracking ||
          ("undefined" != typeof ga &&
            ga("send", {
              hitType: "event",
              eventCategory: e,
              eventAction: t,
              eventLabel: o,
            }),
          "undefined" != typeof gtag
            ? gtag("event", t, { event_category: e, event_label: o })
            : "undefined" != typeof dataLayer &&
              dataLayer.push({ event: "ft." + t, eventCategory: e }));
      }),
      (o.prototype.trackOrder = function (t, e) {
        var o = this;
        if (
          ("undefined" == typeof fbq ||
            this.disableFacebookTracking ||
            fbq("track", "Purchase", {
              contents: t.products.map(function (t) {
                return {
                  id: t.uid,
                  quantity: t.quantity,
                  item_price:
                    ((o.conversion || {})[t.uid] || {}).value || t.amount,
                  title: t.title,
                };
              }),
              content_type: "product",
              value: ((this.conversion || {})[t.products[0].uid] || {}).value
                ? this.conversion[t.products[0].uid].value *
                  t.products[0].quantity
                : t.totalAmount,
              currency: "EUR",
            }),
          !this.disableGoogleTracking)
        ) {
          if ("undefined" != typeof ga) {
            ga("require", "ec"), ga("set", "currencyCode", "EUR");
            for (var i = 0; i < t.products.length; i++)
              ga("ec:addProduct", {
                id: t.products[i].uid,
                name: t.products[i].title,
                price:
                  ((this.conversion || {})[t.products[i].uid] || {}).value ||
                  t.products[i].amount,
                quantity: t.products[i].quantity,
                category: t.products[i].type,
              });
            ga("ec:setAction", "purchase", {
              id: t.uid,
              affiliation: "Formitable",
              revenue: ((this.conversion || {})[t.products[0].uid] || {}).value
                ? this.conversion[t.products[0].uid].value *
                  t.products[0].quantity
                : t.totalAmount,
            });
          }
          "undefined" != typeof gtag
            ? gtag("event", "purchase", {
                transaction_id: t.uid,
                affiliation: "Formitable",
                value: ((this.conversion || {})[t.products[0].uid] || {}).value
                  ? this.conversion[t.products[0].uid].value *
                    t.products[0].quantity
                  : t.totalAmount,
                currency: "EUR",
                items: t.products.map(function (t) {
                  return {
                    id: t.uid,
                    name: t.title,
                    quantity: t.quantity,
                    price:
                      ((o.conversion || {})[t.uid] || {}).value || t.amount,
                    category: t.type,
                  };
                }),
              })
            : "undefined" != typeof dataLayer &&
              dataLayer.push({
                event: "ft.purchase",
                productType: e,
                ecommerce: {
                  currencyCode: "EUR",
                  purchase: {
                    actionField: {
                      id: t.uid,
                      affiliation: "Formitable",
                      revenue: (
                        (this.conversion || {})[t.products[0].uid] || {}
                      ).value
                        ? this.conversion[t.products[0].uid].value *
                          t.products[0].quantity
                        : t.totalAmount,
                    },
                    products: t.products.map(function (t) {
                      return {
                        id: t.uid,
                        name: t.title,
                        quantity: t.quantity,
                        price:
                          ((o.conversion || {})[t.uid] || {}).value || t.amount,
                        category: t.type,
                      };
                    }),
                  },
                },
              });
        }
      }),
      (e.Analytics = o);
  })((Sdk = Sdk || {})),
  Element.prototype.matches ||
    (Element.prototype.matches = Element.prototype.msMatchesSelector),
  Element.prototype.closest ||
    (Element.prototype.closest = function (t) {
      for (var e = this; e; ) {
        if (e.matches(t)) return e;
        e = e.parentElement;
      }
    }),
  (function (t) {
    var e =
      ((o.isInt = function (t) {
        return !isNaN(parseInt(t));
      }),
      (o.httpGetAsync = function (t, e) {
        var o = new XMLHttpRequest();
        (o.onreadystatechange = function () {
          4 == o.readyState && 200 == o.status && e(o.responseText);
        }),
          o.open("GET", t, !0),
          o.send(null);
      }),
      (o.loadStyleSheet = function (t) {
        var e = document.createElement("link");
        (e.rel = "stylesheet"),
          (e.type = "text/css"),
          (e.href = this.updateQueryStringParameter(
            t,
            "c",
            new Date().getTime()
          )),
          document.getElementsByTagName("head")[0].appendChild(e);
      }),
      (o.updateQueryStringParameter = function (t, e, o) {
        var i = new RegExp("([?&])" + e + "=.*?(&|$)", "i"),
          a = -1 !== t.indexOf("?") ? "&" : "?";
        return t.match(i)
          ? t.replace(i, "$1" + e + "=" + o + "$2")
          : t + a + e + "=" + o;
      }),
      (o.addWindowListener = function (t, e, o) {
        var i = window[this.getEventName(t)] || [];
        window.addEventListener(t, e, o),
          i.push(e),
          (window[this.getEventName(t)] = i);
      }),
      (o.getEventName = function (t) {
        return "listeners_" + t.replace(/-/g, "_");
      }),
      (o.removeListeners = function (t) {
        for (
          var e = window[this.getEventName(t)] || [], o = 0;
          o < e.length;
          o++
        )
          window.removeEventListener(t, e[o]);
        window[this.getEventName(t)] = [];
      }),
      (o.getParameterByName = function (t) {
        t = RegExp("[?&]" + t + "=([^&]*)").exec(window.location.search);
        return t && decodeURIComponent(t[1].replace(/\+/g, " "));
      }),
      (o.parameterIsPresent = function (t) {
        return !!RegExp("[?&]" + t).exec(window.location.search);
      }),
      (o.removeParameterByName = function (t, e) {
        return t
          .replace(new RegExp("[?&]" + e + "=[^&#]*(#.*)?$"), "$1")
          .replace(new RegExp("([?&])" + e + "=[^&]*&"), "$1");
      }),
      (o.removeAllFtParams = function () {
        var t = window.location.href,
          t = this.removeParameterByName(t, "ft-page");
        (t = this.removeParameterByName(t, "ft-booking")),
          (t = this.removeParameterByName(t, "ft-order")),
          (t = this.removeParameterByName(t, "ft-voucher")),
          (t = this.removeParameterByName(t, "ft-type")),
          (t = this.removeParameterByName(t, "ft-option")),
          (t = this.removeParameterByName(t, "ft-option-accept")),
          (t = this.removeParameterByName(t, "ft-language")),
          (t = this.removeParameterByName(t, "ft-takeaway")),
          (t = this.removeParameterByName(t, "ft-restaurant")),
          (t = this.removeParameterByName(t, "ft-date")),
          (t = this.removeParameterByName(t, "ft-time")),
          (t = this.removeParameterByName(t, "ft-ticket")),
          (t = this.removeParameterByName(t, "ft-waitlistItem")),
          (t = this.removeParameterByName(t, "ft-partysize")),
          (t = this.removeParameterByName(t, "ft-promotioncode")),
          null != window.history &&
            null != window.history.pushState &&
            window.history.pushState({}, document.title, t);
      }),
      (o.storageAvailable = function (t) {
        try {
          var e = window[t],
            o = "__storage_test__";
          return e.setItem(o, o), e.removeItem(o), !0;
        } catch (t) {
          return !1;
        }
      }),
      o);
    function o() {}
    t.Tools = e;
  })((Sdk = Sdk || {})),
  (function (s) {
    var t =
      ((e.prototype.parseWidgets = function (t) {
        var e = document.querySelectorAll("div[class^='ft-widget']");
        this.current = null;
        try {
          var o,
            i,
            a = e[0];
          if (
            (a &&
              ((a.classList.contains("ft-widget-formitable") ||
                a.classList.contains("ft-widget-b1")) &&
                ((a.className = "ft-widget-b1"),
                (o = new s.BookWidget1(a, t)),
                (this.current = o)),
              (a.classList.contains("ft-widget-side") ||
                a.classList.contains("ft-widget-b2")) &&
                (a.classList.contains("ft-widget-side") &&
                  (a.className = "ft-widget-side"),
                a.classList.contains("ft-widget-b2") &&
                  (a.className = "ft-widget-b2"),
                (i = new s.BookWidget2(a, t)),
                (this.current = i))),
            1 < e.length)
          )
            for (var r = 1; r < e.length; r++) {
              var n = e[r];
              (n.classList.contains("ft-widget-side") ||
                n.classList.contains("ft-widget-b2") ||
                n.classList.contains("ft-widget-formitable") ||
                n.classList.contains("ft-widget-b1")) &&
                n.parentNode.removeChild(e[r]);
            }
        } catch (t) {
          console.warn("Error parsing widgets: " + t);
        }
      }),
      (e.prototype.parseAnchors = function () {
        for (
          var d = this, t = document.querySelectorAll("a[href^='#ft-']"), e = 0;
          e < t.length;
          e++
        )
          try {
            var o = t[e];
            o.setAttribute("data-anchor", o.href.split("#ft-")[1]),
              (o.href = "#"),
              o.addEventListener(
                "click",
                function (t) {
                  var e,
                    o = t.target.closest("a").getAttribute("data-anchor"),
                    i = o.split("-"),
                    a = o.match(/^([a-fA-F0-9]{8})/);
                  a && (e = a[1]);
                  var r = t.target.closest("a").getAttribute("data-cid"),
                    o = null != e,
                    n = 1 < i.length - (o ? 1 : 0),
                    a = d.get(),
                    s = o ? i[1] : i[0],
                    u = n ? (o ? i[2] : i[1]) : void 0;
                  return (
                    t.preventDefault(),
                    o &&
                      e != a.uid &&
                      a.parse(e, function (t) {
                        n
                          ? t[s](u, "anchor", r)
                          : "openSubscribe" == s
                          ? t[s](void 0, "anchor", r)
                          : t[s]("anchor", r);
                      }),
                    n
                      ? a[s](u, "anchor", r, a.uid)
                      : "openSubscribe" == s
                      ? a[s](void 0, "anchor", r, a.uid)
                      : a[s]("anchor", r, a.uid),
                    !1
                  );
                },
                !0
              );
          } catch (t) {
            console.warn("Error parsing anchors: " + t);
          }
      }),
      (e.prototype.parse = function (t) {
        this.parseWidgets(t), this.parseAnchors();
      }),
      (e.prototype.get = function (t) {
        return (
          this.current || console.warn("No widget available"), this.current
        );
      }),
      (e.prototype.all = function (t) {
        return [this.current];
      }),
      e);
    function e() {
      var o = this;
      (this.current = null),
        window.addEventListener(
          "message",
          function (t) {
            var e;
            -1 <
              t.origin
                .toLowerCase()
                .replace("https://", "")
                .indexOf(
                  "https://widget.formitable.com".replace("https://", "")
                ) &&
              (t = "^" === (e = t.data).address ? o : o.get(e.address))[
                e.method
              ].apply(t, e.args);
          },
          !1
        );
    }
    s.WidgetsContainer = t;
  })((Sdk = Sdk || {})),
  (function (i) {
    var t =
      ((e.prototype.load = function (t, e) {
        var o = new i.Modules[t]();
        e &&
          Object.keys(e).forEach(function (t) {
            o.set(t, e[t]);
          }),
          this.list.push(o);
      }),
      (e.prototype.get = function (e) {
        if ((this.list.length || console.warn("No modules loaded"), e)) {
          var t = this.list.filter(function (t) {
            return t.name === e;
          });
          return t.length ? t[0] : null;
        }
        return this.list[0];
      }),
      (e.prototype.all = function () {
        return this.list;
      }),
      e);
    function e() {
      this.list = [];
    }
    i.ModulesContainer = t;
  })((Sdk = Sdk || {})),
  (function (t) {
    var e =
      ((o.prototype.init = function () {
        this.widgets.parse(), (this.Side = new i(this.widgets));
      }),
      (o.prototype.parse = function (t) {
        this.widgets.parse(t);
      }),
      (o.prototype.load = function (t, e) {
        for (var o = t.split(","), i = 0; i < o.length; i++)
          try {
            this.modules.load(o[i], e);
          } catch (t) {
            console.warn("Could not load module " + o[i]), console.log(t);
          }
      }),
      o);
    function o() {
      (this.widgets = new t.WidgetsContainer()),
        (this.modules = new t.ModulesContainer());
    }
    t.Ft = e;
    var i =
      ((a.prototype.open = function () {
        this.widgets.get().open();
      }),
      (a.prototype.close = function () {
        this.widgets.get().close();
      }),
      (a.prototype.toggle = function () {
        this.widgets.get().toggle();
      }),
      (a.prototype.openTicket = function (t) {
        this.widgets.get().openTicket(t);
      }),
      (a.prototype.openVouchers = function () {
        this.widgets.get().openShop("vouchers");
      }),
      a);
    function a(t) {
      this.widgets = t;
    }
    t.Legacy = i;
  })((Sdk = Sdk || {}));
var FT = new Sdk.Ft();
!(function (t, e) {
  "complete" === t.readyState || "interactive" === t.readyState
    ? e.init()
    : t.addEventListener(
        "DOMContentLoaded",
        function () {
          e.init();
        },
        !1
      );
})(document, FT);
